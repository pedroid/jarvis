ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:woodwork
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

####三角尺
####角度器
####盒子
####馬凳
####圓凳
####矮櫃


###發表的平台
###CNC 的研究
###Sketchup

##產品規劃
###鳥兒時鐘
使用者可以錄製自己的鐘點音效
###桌墊X牙醫
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:top_10_woodwork_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/top_10_woodwork_plan.markdown
data#Top 10 wood project I am interested

## 
![Alt text](https://s-media-cache-ak0.pinimg.com/564x/80/15/8b/80158baabab86ed125e7438a0f3da282.jpg)

##wood hinge
![Wood hinges](http://woodgears.ca/wood_hardware/wooden_hinge.jpg)

##Open-Close Wood Gear

##wood toy bricks
![Wood bricks](https://s-media-cache-ak0.pinimg.com/564x/08/2a/90/082a901111c586eaedb530e5719f79a7.jpg)



ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:top_10_woodwork_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/top_10_woodwork_plan.markdown
data#Top 10 wood project I am interested

## 
![Alt text](https://s-media-cache-ak0.pinimg.com/564x/80/15/8b/80158baabab86ed125e7438a0f3da282.jpg)

##wood hinge
![Wood hinges](http://woodgears.ca/wood_hardware/wooden_hinge.jpg)

##Open-Close Wood Gear

##wood toy bricks
![Wood bricks](https://s-media-cache-ak0.pinimg.com/564x/08/2a/90/082a901111c586eaedb530e5719f79a7.jpg)



ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:top_10_woodwork_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/top_10_woodwork_plan.markdown
data#Top 10 wood project I am interested

## 
![Alt text](https://s-media-cache-ak0.pinimg.com/564x/80/15/8b/80158baabab86ed125e7438a0f3da282.jpg)

##wood hinge
![Wood hinges](http://woodgears.ca/wood_hardware/wooden_hinge.jpg)

##Open-Close Wood Gear

##wood toy bricks
![Wood bricks](https://s-media-cache-ak0.pinimg.com/564x/08/2a/90/082a901111c586eaedb530e5719f79a7.jpg)



ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:top_10_woodwork_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/top_10_woodwork_plan.markdown
data#Top 10 wood project I am interested

## 
![Alt text](https://s-media-cache-ak0.pinimg.com/564x/80/15/8b/80158baabab86ed125e7438a0f3da282.jpg)

##wood hinge
![Wood hinges](http://woodgears.ca/wood_hardware/wooden_hinge.jpg)

##Open-Close Wood Gear

##wood toy bricks
![Wood bricks](https://s-media-cache-ak0.pinimg.com/564x/08/2a/90/082a901111c586eaedb530e5719f79a7.jpg)



blog/images/.jpg
blog/images/article.jpg
blog/images/jarvis.jpg

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

####三角尺
####角度器
####盒子
####馬凳
####圓凳
####矮櫃


###發表的平台
###CNC 的研究
###Sketchup

##產品規劃
###木工X電子
1. 鳥兒時鐘
使用者可以錄製自己的鐘點音效
2. 設計圖案結合山景與野生動物與台灣圖騰
###單純木工
1. 夾子
2. 相框
3. 

reference
1. [20 Most Profitable Woodworking Business Ideas](https://99businessideas.com/20-most-profitable-woodworking-business-ideas/)
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

1. 三角尺
2. 活動角尺
3. 盒子
4. 馬凳
5. 圓凳
6. 矮櫃


###發表的平台
###CNC 的研究
###Sketchup

##產品規劃
###木工X電子
1. 鳥兒時鐘
使用者可以錄製自己的鐘點音效
2. 設計圖案結合山景與野生動物與台灣圖騰
###單純木工
1. 夾子
2. 相框
3. 

reference
1. [20 Most Profitable Woodworking Business Ideas](https://99businessideas.com/20-most-profitable-woodworking-business-ideas/)
unpublish
undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
unpublish
undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:FSM_framework.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_framework.markdown
data#FSM framework
將經驗與資料框架化

command from user:ls
[ '.git',
  '.gitignore',
  'MapsWithPhotos',
  'RepeatedCodeInverse',
  'blog',
  'bootstrap_template.html',
  'compiler.js',
  'd3',
  'demo_jarvis.html',
  'exec.js',
  'express_jarvis.js',
  'files',
  'flex',
  'form',
  'form.html',
  'index.html',
  'jarvis_socket_server.js',
  'markdown',
  'mathjax',
  'module_template.js',
  'mongodb.js',
  'nohup.out',
  'public',
  'readfile.js',
  'run.sh',
  'share',
  'sqlite',
  'stop.sh',
  'sysconfig.json',
  'templates.erb',
  'test',
  'test.html',
  'test.js',
  'testfs.js',
  'todo',
  'ui_cmd.html',
  'update.sh',
  'upgrade.sh',
  'upload.html',
  'views',
  'wysiwyg.html',
  'youtube.html' ]
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'l', 's' ]
Tokens:
VAR

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix 
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:recipe
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
filename:beef_noodle.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/recipe/
path:blog/recipe/beef_noodle.markdown
data#牛肉麵
@u2b https://www.youtube.com/embed/cyeuDeM4UUg @u2bee
##備料 

1. 蔥(2-3)、薑(5)、蒜(5)、辣椒(2)、蕃茄(3)、白蘿蔔(3)、洋蔥(2)、紅蘿蔔(三分之二)、香菜
2. 牛肉(牛肋條)川燙去腥味，再浸常溫水，讓肉變Q
3. 調味料：醬油、冰糖、辣豆拌醬、蕃茄醬
4. 香料：白胡椒、迷迭香
##步驟

1. 豬油加蔥薑蒜拌炒，加入豆拌醬3匙、醬油1杯、紅酒或米酒少許、蕃茄醬少許，冰糖三分之二匙，放入牛肉拌煮
2. 放入壓力鍋，水蓋過肉(如使用一般鍋煮，水要再多一些)，加入白胡椒、迷迭香
3. 壓力鍋蓋鍋，加熱直到水氣出氣發出"逼"的聲音，關小火等候20分鐘，爾後再關火等候10分鐘
4. 開鍋試味道，若太淡，加入海鹽(不以加醬油來增醎)
5. 加入紅蘿蔔、白蘿蔔、蕃茄
6. 蓋壓力鍋後煮10分鐘，並等候排氣
7. 另起一鍋煮白麵條，加少許的鹽
8. 麵條跟牛肉湯汁合併即完成，若牛肉湯太醎可以加熱水
9. 若沒有壓力鍋，當牛肉煮滾後轉小火40分鐘，蘿蔔放入後煮20分鐘

##test

test
unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:javascripts
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/javascripts/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/javascripts/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:porting_application.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/porting_application.markdown
data#移殖應用程式到新的開發環境步驟

!tag visual studio, forfun
!publish   

#test
比如說從Qt 5.4 到 5.7 , Visual Studio 2013 到 2015 或者是新增一個類似的應用

1. 在新環境中開啟一個最簡單，可以執行的程式
2. GUI Template 複製
3. 虛擬Server的建置
4. GUI rendering
5. assets 
6. Controller porting
7. 按鈕行為

##備分一台相同開發環境的主機
代價就是時間
dir to move:electronics
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/electronics/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/electronics/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:..
a
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:recipe
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
filename:beef_noodle.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/recipe/
path:blog/recipe/beef_noodle.markdown
data#牛肉麵
@u2b https://www.youtube.com/embed/cyeuDeM4UUg @u2bee 
##備料 

1. 蔥(2-3)、薑(5)、蒜(5)、辣椒(2)、蕃茄(3)、白蘿蔔(3)、洋蔥(2)、紅蘿蔔(三分之二)、香菜
2. 牛肉(牛肋條)川燙去腥味，再浸常溫水，讓肉變Q
3. 調味料：醬油、冰糖、辣豆拌醬、蕃茄醬
4. 香料：白胡椒、迷迭香
##步驟

1. 豬油加蔥薑蒜拌炒，加入豆拌醬3匙、醬油1杯、紅酒或米酒少許、蕃茄醬少許，冰糖三分之二匙，放入牛肉拌煮
2. 放入壓力鍋，水蓋過肉(如使用一般鍋煮，水要再多一些)，加入白胡椒、迷迭香
3. 壓力鍋蓋鍋，加熱直到水氣出氣發出"逼"的聲音，關小火等候20分鐘，爾後再關火等候10分鐘
4. 開鍋試味道，若太淡，加入海鹽(不以加醬油來增醎)
5. 加入紅蘿蔔、白蘿蔔、蕃茄
6. 蓋壓力鍋後煮10分鐘，並等候排氣
7. 另起一鍋煮白麵條，加少許的鹽
8. 麵條跟牛肉湯汁合併即完成，若牛肉湯太醎可以加熱水
9. 若沒有壓力鍋，當牛肉煮滾後轉小火40分鐘，蘿蔔放入後煮20分鐘

##test

test
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
Uploading: IMAG1483_1.jpg

Uploading: IMAG1483_1.jpg
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:..
a
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開
##Architecture

filename:JSDC_2016_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/JSDC_2016_notes.markdown
data#JSDC 2016 筆記
[youtube影片來源](https://www.youtube.com/playlist?list=PL8dIIwCMF-SNmECoq8sF4onoxMqhRz9WT)
##03 JavaScript 的 SEO 奧義 by Jose & Wildcat
##05 使用 Angular 2 與 Firebase 實現 Serverless 網站架構 by Will 保哥
##08 fbreactions.io - 用AWS Lambda 爬數據視覺化 by 劉俊彥(Vincent)
##13 NIME: 使用 nodejs 快快樂樂開發輸入法 by Lee
##16 Data Visualization performance optimization by Jim Chang (吉姆)
##20 親愛的，我們來土炮一個 Google Docs 吧！ by Fred Chien
##21 Vue.js 實戰分享 - 使用 Vue.js 打造產品服務的 dashboard by Cyril Yu
##22 Lightning Talk
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:woodwork
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

1. 三角尺
2. 活動角尺
3. 盒子
4. 馬凳
5. 圓凳
6. 矮櫃


###發表的平台
###CNC 的研究
###Sketchup

##產品規劃
###木工X電子
1. 鳥兒時鐘
使用者可以錄製自己的鐘點音效
2. 設計圖案結合山景與野生動物與台灣圖騰
###木工X機構
###單純木工
1. 夾子
2. 相框
3. 

reference
1. [20 Most Profitable Woodworking Business Ideas](https://99businessideas.com/20-most-profitable-woodworking-business-ideas/)
unpublish
undefined
unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
blog/woodwork/100woodprojects has been created.
dir to move:100woodprojects
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/woodwork/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/100woodprojects/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/100woodprojects/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/100woodprojects/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix 
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

publish!
[ ' UML' ]
start save
obj:[object Object]
filename:autogenerate_UML

/home/ubuntu/nodejs/jarvis/express_jarvis.js:347
							obj[data.filename].publish = true;
							                           ^
TypeError: Cannot set property 'publish' of undefined
    at readFileCallBack (/home/ubuntu/nodejs/jarvis/express_jarvis.js:347:35)
    at fs.js:268:14
    at Object.oncomplete (fs.js:107:15)
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
unpublish
undefined
unpublish
undefined
unpublish
undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:OODL.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/OODL.markdown
data#Object-Oriented Description Language (OODL)

##Pattern Description
unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. 

unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:compiler
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:OODL.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/OODL.markdown
data#Object-Oriented Description Language (OODL)

OODL is a computer language to describe object and relation between objects with plain text formatting syntax.

##Pattern Description
unpublish
undefined
unpublish
undefined
_csrf:{{ csrf }}
dir_name:/forfun

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: EISDIR, open '/home/ubuntu/nodejs/jarvis/blog/resources/photos/'
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入




path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:..
a
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
unpublish
undefined
unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:woodwork
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

1. 三角尺
2. 活動角尺
3. 盒子
4. 馬凳
5. 圓凳
6. 矮櫃


###發表的平台
###CNC 的研究
###Sketchup (done)
[Tutorial@woodgears](http://woodgears.ca/sketchup/)

##產品規劃
###木工X電子
1. 鳥兒時鐘
使用者可以錄製自己的鐘點音效
2. 設計圖案結合山景與野生動物與台灣圖騰
###木工X機構
###單純木工
1. 夾子
2. 相框
3. 

reference
1. [20 Most Profitable Woodworking Business Ideas](https://99businessideas.com/20-most-profitable-woodworking-business-ideas/)
unpublish
undefined
unpublish
undefined
unpublish
undefined
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入





/home/ubuntu/nodejs/jarvis/express_jarvis.js:242
app.post('/form/signup_post', function(request, response){
^^^
SyntaxError: Unexpected identifier
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3

/home/ubuntu/nodejs/jarvis/express_jarvis.js:242
app.post('/form/signup_post', function(request, response){
^^^
SyntaxError: Unexpected identifier
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:electronics
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/electronics/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/electronics/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/electronics/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:autogenerate_UML.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/autogenerate_UML.markdown
data#Auto Generate UML
!tag UML



dir to move:javascripts
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/javascripts/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/javascripts/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:..
a
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:d3
b
pwd:/home/ubuntu/nodejs/jarvis/blog/
blog/d3 has been created.
dir to move:d3
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/d3/
unpublish
undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
blog/images/something.jpg

child_process.js:935
    throw errnoException(process._errno, 'spawn');
          ^
Error: spawn ENOMEM
    at errnoException (child_process.js:988:11)
    at ChildProcess.spawn (child_process.js:935:11)
    at exports.spawn (child_process.js:723:9)
    at ReaDuplexer.ImageMagick.spawn (/home/ubuntu/nodejs/node_modules/node-gallery/node_modules/imagemagick-stream/index.js:216:16)
    at processImmediate [as _immediateCallback] (timers.js:330:15)
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:d3
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/d3/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
blog/computer_science/algorithm has been created.
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
blog/computer_science/d3 has been created.
dir to move:d3
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
dir to move:d3
b
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:d3
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:d3
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/d3/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:algorithm
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/algorithm/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/algorithm/
unpublish
undefined
unpublish
undefined
unpublish
undefined
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
blog/computer_science/MachineLearning has been created.
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:MachineLearning
b
[ '/home/ubuntu/nodejs/jarvis/blog/',
  '/home/ubuntu/nodejs/jarvis/blog/computer_science/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:porting_application.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/porting_application.markdown
data#移殖應用程式到新的開發環境步驟

!tag visual studio, forfun
!publish   

#test
比如說從Qt 5.4 到 5.7 , Visual Studio 2013 到 2015 或者是新增一個類似的應用

1. 在新環境中開啟一個最簡單，可以執行的程式
2. GUI Template 複製
3. 虛擬Server的建置
4. GUI rendering
5. assets 
6. Controller porting
7. 按鈕行為

##備分一台相同開發環境的主機
代價就是時間
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入




unpublish
undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入




filename:example.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/example.markdown
data#Examples
##tables
| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入




path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:todo
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/todo
{ [Error: ENOENT, open 'blog/computer_science/todo'] errno: 34, code: 'ENOENT', path: 'blog/computer_science/todo' }
dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
filename:todo
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo
{ [Error: ENOENT, open 'blog/todo'] errno: 34, code: 'ENOENT', path: 'blog/todo' }
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入




unpublish
undefined
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:OODL.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/OODL.markdown
data#Object-Oriented Description Language (OODL)

OODL is a computer language to describe object and relation between objects using plain text formatting syntax.

##syntax 語法
###eamples
[Square]

-length: double

+display()

[TrafficSignalStateGreen]->[TrafficSignalStateAbstract]

+

[TrafficSignalStateYellow]->[TrafficSignalStateAbstract]


###object name
###public/protected/private
###properties
###member function

##Pattern Description
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix 
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

publish!
[ ' FSM' ]
start save
obj:[object Object]
filename:FSM_transition_matrix_autogenerate_diagram_code

/home/ubuntu/nodejs/jarvis/express_jarvis.js:371
							obj[data.filename].publish = true;
							                           ^
TypeError: Cannot set property 'publish' of undefined
    at readFileCallBack (/home/ubuntu/nodejs/jarvis/express_jarvis.js:371:35)
    at fs.js:268:14
    at Object.oncomplete (fs.js:107:15)
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix described by FSM Markup Language
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例 
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

unpublish
undefined

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: listen EADDRINUSE
    at errnoException (net.js:901:11)
    at Server._listen2 (net.js:1039:14)
    at listen (net.js:1061:10)
    at Server.listen (net.js:1135:5)
    at Object.<anonymous> (/home/ubuntu/nodejs/jarvis/express_jarvis.js:296:8)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: listen EADDRINUSE
    at errnoException (net.js:901:11)
    at Server._listen2 (net.js:1039:14)
    at listen (net.js:1061:10)
    at Server.listen (net.js:1135:5)
    at Object.<anonymous> (/home/ubuntu/nodejs/jarvis/express_jarvis.js:296:8)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
[ 'ccc', '1234567', undefined ]
[ 'ccc', '1234567', '', '' ]
[ 'ccc', '1234567', '', '' ]
[ 'ccc', '1234567', '', undefined ]
[ 'ccc',
  '1234567',
  undefined,
  undefined,
  undefined,
  undefined,
  undefined ]
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/
dir to move:computer_science
b
[ '/home/ubuntu/nodejs/jarvis/blog/' ]
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開
##Architecture

path: 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
relative_path:
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
relative_path:
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
files:dandelion.jpg,trolltunga.jpg
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
files:dandelion.jpg,trolltunga.jpg
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
files:dandelion.jpg,trolltunga.jpg
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
ls:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
files:dandelion.jpg,trolltunga.jpg
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
files:dandelion.jpg,trolltunga.jpg
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
relative_path:
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,IMAG1512.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,IMAG1512.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
cd cmd dir to move:electronics
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/electronics/
ls:/home/ubuntu/nodejs/jarvis/blog/electronics/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/electronics/
files:20160905_144047.jpg
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
files:20160819_081634.jpg,20160905_144047.jpg,2017-01-17.png,IMAG1483_1.jpg,IMAG1506.jpg,IMAG1512.jpg,computer_science,electronics,quickshot.png,tmp3,woodwork
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
blog/images/something.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/.jpg
blog/images/.jpg
blog/images/.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
assets:undefined

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:..
a
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
unpublish
undefined
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:electronic
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:electronics
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/electronics/
ls:/home/ubuntu/nodejs/jarvis/blog/electronics/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/electronics/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:compiler
paths in stack:/home/ubuntu/nodejs/jarvis/blog/,/home/ubuntu/nodejs/jarvis/blog/computer_science/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
blog/images/something.jpg
blog/images/something.jpg
blog/images/something.jpg
blog/images/.jpg
blog/woodwork/article1.html
blog/images/.jpg
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
filename:Qt_console_window.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_console_window.markdown
data!code
#ifdef GUI_VERSION_QT_WITH_CONSOLE
//Create a Console attached to this GUI app for showing debug messages.
AllocConsole();
AttachConsole(GetCurrentProcessId());
freopen("CON", "w", stdout);//Redirect stdout
/*HWND handle = GetConsoleWindow();
if (handle == NULL){

}
else{
ShowWindow(handle, SW_MINIMIZE);
}
*/
//End Create a Console attached to this GUI app for showing debug messages.
#endif



#ifdef GUI_VERSION_QT_WITH_CONSOLE
FreeConsole();
#endif​
!codee
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
blog/images/something.jpg
blog/images/something.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
[ 'ccc', '1234567' ]
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver

##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:VillageAI
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:..
a
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
dir_to_create:blog/villageAI
photo_dir_to_create:blog/resources/photos/villageAI/
blog/villageAI has been created.
blog/resources/photos/villageAI/ has been created.
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
unpublish
undefined
unpublish
undefined
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
filename:todo
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo
{ [Error: ENOENT, open 'blog/todo'] errno: 34, code: 'ENOENT', path: 'blog/todo' }
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:540_Single_Element_in_a_Sorted_Array.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/540_Single_Element_in_a_Sorted_Array.markdown
data#540. Single Element in a Sorted Array

unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:002_Add_Two_Numbers.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/002_Add_Two_Numbers.markdown
data#002 Add Two Numbers
##description
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
###Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


##Solution
    ListNode* Solution::addTwoNumbers(ListNode* l1, ListNode* l2) {
    	ListNode *currNode_l1 = l1;
    	ListNode *currNode_l2 = l2;
    	ListNode *ResultListNode;
    	ListNode *currResultListNode;// = &ResultListNode;
    	int l1_number;
    	int l2_number;
    	bool overflow = false;	
    	bool flag_first = true;
    	ListNode NewListNode(NULL);
    	while (true){		
    		if (currNode_l1 == NULL) l1_number = 0; else l1_number = currNode_l1->val;
    		if (currNode_l2 == NULL) l2_number = 0; else l2_number = currNode_l2->val;		
		
		ListNode *NewListNode = new ListNode(NULL);
		if (flag_first) {
			ResultListNode = NewListNode;
			flag_first = false;
			NewListNode->val = l1_number + l2_number;
			if (NewListNode->val >= 10){
				overflow = true;
				NewListNode->val = NewListNode->val % 10;
			}

		}else{
			currResultListNode->next = NewListNode;
			if (overflow) NewListNode->val = l1_number + l2_number + 1;
			else NewListNode->val = l1_number + l2_number;
			overflow = false;
			if (NewListNode->val >= 10){
				overflow = true;
				NewListNode->val = NewListNode->val % 10;
			}
			else{
				overflow = false;
				NewListNode->val = NewListNode->val;
			}
		}

		currResultListNode = NewListNode;

		if (currNode_l1 != NULL){
			if (currNode_l1->next!=NULL) currNode_l1 = currNode_l1->next;
			else currNode_l1 = NULL;
		}
		if (currNode_l2 != NULL){
			if (currNode_l2->next != NULL)currNode_l2 = currNode_l2->next;
			else currNode_l2 = NULL;
		}
		
		if (currNode_l1 == NULL && currNode_l2 == NULL){
			if (overflow){
				ListNode *NewListNode = new ListNode(NULL);
				NewListNode->val = 1;				
				currResultListNode->next = NewListNode;
				break; 
			}else{ break; }
		}
	}


	return ResultListNode;
}

##Other Solution
    public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
    }

album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
assets:undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. d 


##projects
1. drag and match game (3days)
2. parser, OODL (3 days)
3. 書架 (3 days)
4. 古今相照 加入
5. multi-purpose and convertible furniture



album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
unpublish
undefined
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture

##projects





cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:MachineLearning
paths in stack:/home/ubuntu/nodejs/jarvis/blog/,/home/ubuntu/nodejs/jarvis/blog/computer_science/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
cd cmd dir to move:d3
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture

##projects





album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix described by FSM Markup Language
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例 
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:recipe
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:recipe
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:javascripts
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/javascripts/
ls:/home/ubuntu/nodejs/jarvis/blog/javascripts/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/javascripts/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/javascripts/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/javascripts/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture

##projects





unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
SyntaxError: Unexpected string
    at Object.parse (native)
    at parse (/home/ubuntu/nodejs/node_modules/body-parser/lib/types/json.js:88:17)
    at /home/ubuntu/nodejs/node_modules/body-parser/lib/read.js:116:18
    at invokeCallback (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:262:16)
    at done (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:251:7)
    at IncomingMessage.onEnd (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:307:7)
    at IncomingMessage.EventEmitter.emit (events.js:92:17)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)
SyntaxError: Unexpected string
    at Object.parse (native)
    at parse (/home/ubuntu/nodejs/node_modules/body-parser/lib/types/json.js:88:17)
    at /home/ubuntu/nodejs/node_modules/body-parser/lib/read.js:116:18
    at invokeCallback (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:262:16)
    at done (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:251:7)
    at IncomingMessage.onEnd (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:307:7)
    at IncomingMessage.EventEmitter.emit (events.js:92:17)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)
SyntaxError: Unexpected number
    at Object.parse (native)
    at parse (/home/ubuntu/nodejs/node_modules/body-parser/lib/types/json.js:88:17)
    at /home/ubuntu/nodejs/node_modules/body-parser/lib/read.js:116:18
    at invokeCallback (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:262:16)
    at done (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:251:7)
    at IncomingMessage.onEnd (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:307:7)
    at IncomingMessage.EventEmitter.emit (events.js:92:17)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)
SyntaxError: Unexpected number
    at Object.parse (native)
    at parse (/home/ubuntu/nodejs/node_modules/body-parser/lib/types/json.js:88:17)
    at /home/ubuntu/nodejs/node_modules/body-parser/lib/read.js:116:18
    at invokeCallback (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:262:16)
    at done (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:251:7)
    at IncomingMessage.onEnd (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:307:7)
    at IncomingMessage.EventEmitter.emit (events.js:92:17)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)
SyntaxError: Unexpected number
    at Object.parse (native)
    at parse (/home/ubuntu/nodejs/node_modules/body-parser/lib/types/json.js:88:17)
    at /home/ubuntu/nodejs/node_modules/body-parser/lib/read.js:116:18
    at invokeCallback (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:262:16)
    at done (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:251:7)
    at IncomingMessage.onEnd (/home/ubuntu/nodejs/node_modules/body-parser/node_modules/raw-body/index.js:307:7)
    at IncomingMessage.EventEmitter.emit (events.js:92:17)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)

/home/ubuntu/nodejs/jarvis/express_jarvis.js:60
console.log('login');
                    ^
SyntaxError: Unexpected token ;
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3
login
1
login
1
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)
##projects





album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
assets:undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
assets:undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)
##projects





album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:arduino_as_interpreter.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/arduino_as_interpreter.markdown
data#Arduino as interpreter
開發firmware的演進
在arduino IDE上寫好，然後upload 到uC上面

最終我想要實現一個系統，在uC上面內建了一個interpreter，使用者透過Serial傳遞程式碼，uC可以即時解析並執行。而任何的輸出入都被視為一個物件

程式碼的範例：設定uC的輸出入介面是固定的

    r.setValue(true);
    r.setValue(false);
    system.sleep(10);
    r.setValue(false);
    g.setValue(true);


End product有點像google Blocks 所呈現的概念，目的是要縮短人類日常生活與微控制器之類的距離，讓寫程式這件事的入門門檻再度下降，讓我們的生活更加的容易。

Google Blocks相關的研究相當的有趣，另外進行[整理](../blog/computer_science/GoogleBlocks.html)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:computer_science
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:GoogleBlocks.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/GoogleBlocks.markdown
data#Google Blocks
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:compiler
paths in stack:/home/ubuntu/nodejs/jarvis/blog/,/home/ubuntu/nodejs/jarvis/blog/computer_science/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/compiler/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/compiler/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:compiler
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/compiler
{ [Error: read EISDIR] code: 'EISDIR', errno: 'EISDIR', syscall: 'read' }
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix described by FSM Markup Language
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例 
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:computer_science
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
relative_path:computer_science/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree

##Hash
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
blog/resources/BPlusTreeStructure.PNG
blog/resources/pBPlusTreeStructure.PNG
blog/resources/phBPlusTreeStructure.PNG
blog/resources/phoBPlusTreeStructure.PNG
blog/resources/photBPlusTreeStructure.PNG
blog/resources/photoBPlusTreeStructure.PNG
blog/resources/photosBPlusTreeStructure.PNG
unpublish
undefined
unpublish
undefined
unpublish
undefined
relative_path:computer_science/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert01.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
relative_path:computer_science/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert02.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
relative_path:computer_science/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/BPlusTreeStructure_insert03.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)

##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

unpublish
undefined
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

1. image server on node.js
2. issue: 首頁的資料夾
3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
6. d3, machine learning, algorithm
7. TCP/IP back information
8. 3D printer driver
9. [leetcode](https://leetcode.com/)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
15. [網頁切版](https://goo.gl/wFSDrL)
16. drag and match game (3days)
17. parser, OODL (3 days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)
##projects





unpublish
undefined
unpublish
undefined
unpublish
undefined
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:introduction_EDA.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/introduction_EDA.markdown
data#Introduction to Electronic Design Automation

[reference, 2007](http://cc.ee.ntu.edu.tw/~eda/Course/IntroEDA07/)
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[reference](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
blog/images/something.jpg
blog/images/something.jpg
blog/images/.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
blog/images/article.jpg
blog/images/jarvis.jpg
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

AI莊園中有一個管家叫Mr. Tachikoma，他會幫你打造許多的工具。
unpublish
undefined
unpublish
undefined
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/

module.js:340
    throw err;
          ^
Error: Cannot find module 'obj2html'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (/home/ubuntu/nodejs/jarvis/express_jarvis.js:19:16)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:recipe
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
filename:beef_noodle.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/recipe/
path:blog/recipe/beef_noodle.markdown
data#牛肉麵
@u2b https://www.youtube.com/embed/cyeuDeM4UUg @u2bee 

##備料 

1. 蔥(2-3)、薑(5)、蒜(5)、辣椒(2)、蕃茄(3)、白蘿蔔(3)、洋蔥(2)、紅蘿蔔(三分之二)、香菜
2. 牛肉(牛肋條)川燙去腥味，再浸常溫水，讓肉變Q
3. 調味料：醬油、冰糖、辣豆拌醬、蕃茄醬
4. 香料：白胡椒、迷迭香
##步驟

1. 豬油加蔥薑蒜拌炒，加入豆拌醬3匙、醬油1杯、紅酒或米酒少許、蕃茄醬少許，冰糖三分之二匙，放入牛肉拌煮
2. 放入壓力鍋，水蓋過肉(如使用一般鍋煮，水要再多一些)，加入白胡椒、迷迭香
3. 壓力鍋蓋鍋，加熱直到水氣出氣發出"逼"的聲音，關小火等候20分鐘，爾後再關火等候10分鐘
4. 開鍋試味道，若太淡，加入海鹽(不以加醬油來增醎)
5. 加入紅蘿蔔、白蘿蔔、蕃茄
6. 蓋壓力鍋後煮10分鐘，並等候排氣
7. 另起一鍋煮白麵條，加少許的鹽
8. 麵條跟牛肉湯汁合併即完成，若牛肉湯太醎可以加熱水
9. 若沒有壓力鍋，當牛肉煮滾後轉小火40分鐘，蘿蔔放入後煮20分鐘

##test

test
unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:Qt_thread_notes.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/Qt_thread_notes.markdown
data#QT Thread 使用筆記

!tag qt, thread 
!publish


## Notes
1. 物件在哪一個thread中被實例化，則該物件(包含旗下的property)存在於該thread
2. 物件實例化後的member function是在哪一個thread中執行就需要去釐清。
3. 當想要存取別的thread中的資料時，使用signal/slots

##架構
1. main thread實例一個繼承自QThread (newThread)的物件，該物件存在於 main thread
2. newThread run() 中的statement會在新的thread中執行
3. 在run() 中宣告一個toolbox，並connect signal/slots

##Usage範例
###使用情境
我們希望在main thread之外，能有一個thread (i.e. newThread class) 幫我們處理一些事務，這些事務通常是影像處理、控制器如狀態機等)，而toolbox class是我們會在newThead中使用到的工具箱函式。我們會在新的thread中實例化toolbox，因此toolbox會存在於新的thread中。所以當main thread想要得知toolbox中的特別參數時，我們使用signal/slots的方式來作thread之間的溝通。

####在新的thread中實例化toolbox
必須在newThread底下的run()之中宣告，該toolbox才會存在於新的thread，若是在其他地方宣告，如Initialize()之前，則仍會存在於main thread之中

####在run()之中執行，並不一定先或後執行
在run()中執行thread_property =1，但是main thread中執行get_property()取得thread_property值，因為在不同的thread中運行，所以會讀取到0(初始值)或1(修改值)並不一定。

####用signal/slots的方式取得不同thread中的值
newThread包含一個SIGNAL(getparametersignal())，當main thread欲取得toolbox中資料的時候，trigger這個SIGNAL，而對應的slot是toolbox中的SLOT(getparameter())

main.cpp

	pnewThread = new newThread();
	pnewThread->start(); // run() 這個function 在新的thread中開始執行
	pnewThread->state(); // @main thread
	pnewThread->get_property(); //取得newThread中的property 
	pnewThread->accessToolbox(); //在此member function中emit signal 通知toolbox 

newThread.h

	#include <qthread.h>
	#include <QDebug>
	#include "toolbox.h"
	class newThread: public QThread
	{
		Q_OBJECT
	public:
		newThread();
		~newThread();
		int Initialize(void);
		int executing(int input);
		void accessToolbox();
		void get_property();
	private:
		toolbox *ptoolbox;
		int thread_property =0;
	protected:
		void run();
	signals:
		void getparametersignal();
	};

newThread.cpp

	#include "newThread.h"


	newThread::newThread()
	{
		this->Initialize();
	}


	newThread::~newThread()
	{
	}

	int newThread::Initialize(void){	
		return 0;
	}

	int newThread::executing(int input){
		qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;	
		ptoolbox = new toolbox();
		ptoolbox->image_processing(input);
		connect(this, SIGNAL(getparametersignal()), ptoolbox, SLOT(getparameter()));
		return 0;
	}

	void newThread::run(void){
		//qDebug() << __FUNCTION__ << "newThread function:" << this->currentThreadId() << endl;
		this->executing(5);
		this->thread_property = 1;

	}

	void newThread::accessToolbox(){
		emit getparametersignal();
	}

	void newThread::get_property(){
		qDebug() << __FUNCTION__ << thread_property << endl;
	};

toolbox.h

	#include <qdebug.h>
	#include <qthread.h>
	class toolbox: public QThread
	{	
		Q_OBJECT
	public:
		toolbox();
		~toolbox();
		int image_processing(int input);
	private:
		int parameter;
	private slots:
		int getparameter();
	};

toolbox.cpp

	#include "toolbox.h"
	toolbox::toolbox()
	{
	}


	toolbox::~toolbox()
	{
	}

	int toolbox::image_processing(int input){
		parameter = input;
		qDebug() << __FUNCTION__ << "image_processing:" << this->currentThreadId() << ", parameter:" << parameter << endl;	
		return 0;
	}

	int toolbox::getparameter(){
		qDebug() << __FUNCTION__ << parameter << endl;
		return 0;
	};

##Application
1. image processing 
2. FSM

##references
1. [Qt event system](http://doc.qt.io/qt-5/eventsandfilters.html)
unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:forfun.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/forfun.markdown
data#test
##contet
sflij
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:autogenerate_UML.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/autogenerate_UML.markdown
data#Auto Generate UML
!tag UML



cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.small.jpg
end upload

/home/ubuntu/nodejs/jarvis/express_jarvis.js:406
			im.resize({
			^
ReferenceError: im is not defined
    at Busboy.<anonymous> (/home/ubuntu/nodejs/jarvis/express_jarvis.js:406:4)
    at Busboy.EventEmitter.emit (events.js:117:20)
    at Busboy.emit (/home/ubuntu/nodejs/node_modules/connect-busboy/node_modules/busboy/lib/main.js:31:35)
    at /home/ubuntu/nodejs/node_modules/connect-busboy/node_modules/busboy/lib/types/multipart.js:52:13
    at process._tickCallback (node.js:415:13)
relative_path:
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/20170414_212045.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/20170414_212045.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200549.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200549.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖

relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖

unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
relative_path:
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/20170317_180841.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/20170317_180841.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170414_212207.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170414_212207.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170317_180841.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
cd cmd dir to move:woodwork
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170408_200521.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/WoodCryptex'
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
##網路上的資源
在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

##第一版及第二版
我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。

第二版就花了比較多的時候，因為第一板用紙箱有一些問題

1. 不夠堅固
2. 因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出

所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖
![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170408_200521.small.jpg)

然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212045.small.jpg)




![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)


##成本
在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28

##心得
-  最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切
- 或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快
- 最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快
- 最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

莊園想要弄一個系統去統計動物活動的區域。但是又不希望建立圍牆。
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

AI莊園中有一個管家叫Mr. Tachikoma，他會幫你打造許多的工具。
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

AI莊園中有一個管家叫Mr. Tachikoma，他會幫你打造許多的工具。
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

AI莊園中有一個管家叫Mr. Tachikoma，他會幫你打造許多的工具。

[Top 10 Algorithm in data mining](http://www.cs.umd.edu/~samir/498/10Algorithms-08.pdf)
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

AI莊園中有一個管家叫Mr. Tachikoma，他會幫你打造許多的工具。

[Top 10 Algorithm in data mining](http://www.cs.umd.edu/~samir/498/10Algorithms-08.pdf)

Story
採竹筍
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
unpublish
undefined
gen_main_html
blog/villageAI/index.html
blog/villageAI/introduction
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。

@html
	<h3> circle</h3>
	<svg width="50" height="50">
		<circle class="pumpkin" cx="25" cy="25" r="22" fill="blue" stroke="gray" stroke-width="2"/>
	</svg>
@htmll
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。

@html
	<h3> circle</h3>
	<svg width="50" height="50">
		<circle class="pumpkin" cx="25" cy="25" r="22" fill="blue" stroke="gray" stroke-width="2"/>
	</svg>
@htmll
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。

@html
	<h3> circle</h3>
	<svg width="50" height="50">
		<circle class="pumpkin" cx="25" cy="25" r="22" fill="blue" stroke="gray" stroke-width="2"/>
	</svg>
@htmll
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tach心想要好好把阿婆現在分類的準則給好好記下來，做為以後分類的參考。以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:todo
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/todo
{ [Error: ENOENT, open 'blog/villageAI/todo'] errno: 34, code: 'ENOENT', path: 'blog/villageAI/todo' }
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo
{ [Error: ENOENT, open 'blog/todo'] errno: 34, code: 'ENOENT', path: 'blog/todo' }
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
15. [網頁切版](https://goo.gl/wFSDrL)

## front-end 
6. [d3](../d3)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)

##algorithm
2. machine learning, algorithm
9. [leetcode](https://leetcode.com/)
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
17. parser, OODL (3 days)
22. [introduction to EDA](../blog/computer_science/introduction_EDA.html)

##projects
8. 3D printer driver
16. drag and match game (3days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)

cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:woodwork_build_plan.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/woodwork_build_plan.markdown
data#woodwork

##schedule
###報名時程

###準備資料


## todo
###將目前沈師傅教的整理

1. 三角尺
2. 活動角尺
3. 盒子
4. 馬凳
5. 圓凳
6. 矮櫃


###發表的平台
###CNC 的研究
###Sketchup (done)
[Tutorial@woodgears](http://woodgears.ca/sketchup/)

##產品規劃
###木工X電子 (木芯設計製作所)
1. 鳥兒時鐘
使用者可以錄製自己的鐘點音效
2. 設計圖案結合山景與野生動物與台灣圖騰
###木工X機構
###單純木工
1. 夾子
2. 相框
3. 

reference
1. [20 Most Profitable Woodworking Business Ideas](https://99businessideas.com/20-most-profitable-woodworking-business-ideas/)
unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:CLanguage.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/CLanguage.markdown
data#你所不知道的C語言 筆記

[「你所不知道的 C 語言」：指標篇 (2016-09-18)](https://www.youtube.com/watch?v=VpyaxUdSd_s)
1. Object: 表達資料的方法; Object-Oriented: Everything is Object
Object 不等於 Object-Oriented

2.*address: "value of" address; 不要唸成star
or dereference
&variable: "address of " variable


reference
1. [hackfoldr筆記](http://hackfoldr.org/dykc/)
2. [godbolt: C to Assembly real-time transform](https://godbolt.org/)
3. [youtube 教學影片](https://www.youtube.com/watch?v=VpyaxUdSd_s)


filename:FSM_framework.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_framework.markdown
data#FSM framework
將經驗與資料框架化
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix described by FSM Markup Language
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例 
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

filename:OODL.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/OODL.markdown
data#Object-Oriented Description Language (OODL)

OODL is a computer language to describe object and relation between objects using plain text formatting syntax.

##syntax 語法
###eamples
[Square]

-length: double

+display()

[TrafficSignalStateGreen]->[TrafficSignalStateAbstract]

+

[TrafficSignalStateYellow]->[TrafficSignalStateAbstract]


###object name
###public/protected/private
###properties
###member function

##Pattern Description
filename:javascript_framework.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/javascript_framework.markdown
dataReference: [Javascript Framework](https://medium.com/@walterwu_22843/js-2017%E5%B9%B4%E4%BD%A0%E6%9C%80%E9%9C%80%E8%A6%81%E5%AD%B8%E7%BF%92%E7%9A%84js%E6%A1%86%E6%9E%B6%E8%B7%9F%E4%B8%BB%E9%A1%8C-%E7%B4%94%E7%BF%BB%E8%AD%AF-66350840e62c#.fyb4ioeke)
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on websocket
##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)

##how to use
1. git clone 

##architecture
##discussion

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on websocket
##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)

##how to use
1. git clone 

##architecture
##discussion

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
15. [網頁切版](https://goo.gl/wFSDrL)

## front-end 
6. [d3](../d3)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)

##algorithm
2. machine learning, algorithm
9. [leetcode](https://leetcode.com/)
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
17. parser, OODL (3 days)
22. [introduction to EDA](../blog/computer_science/introduction_EDA.html)

##projects
8. 3D printer driver
16. drag and match game (3days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)

unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[說明的滿清楚的Youtube影片](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

filename:win32_api.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/win32_api.markdown
data#Win32 API Overview
##why Win32 API?
所有的Framework(.NET, Qt, MFC, ...) 都是建構在Win32 API之上，Win32 API就像是軟體端程式設計師能夠操控的最小工具單位。

[reference 1](http://read.pudn.com/downloads120/ebook/512386/%E6%96%B0%E7%BC%96Windows%20API%E5%8F%82%E8%80%83%E5%A4%A7%E5%85%A8.pdf)

[reference 2](http://www.functionx.com/win32/Lesson01.htm)

[簡體中文資源](http://winprog.org/tutorial/zh/apivsmfc_cn.html)
filename:porting_application.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/porting_application.markdown
data#移殖應用程式到新的開發環境步驟
比如說從Qt 5.4 到 5.7 , Visual Studio 2013 到 2015 或者是新增一個類似的應用

1. 在新環境中開啟一個最簡單，可以執行的程式
2. GUI Template 複製
3. 虛擬Server的建置
4. GUI render
5. Controller 

filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket
Markdown++
##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)

##how to use
1. git clone 

##architecture
Markdown -> html

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    ![系統指令]
    [markdown prime]，內含一些非markdown語法但系統可以辨識的語法，如內嵌youtube iframe，或是內含系統指令，比如說想要內嵌HTML code

例子：
 
    @html 
    <svg>
    </svg>
    @htmll

[markdown prime]會經過一個前處理器，把該

Markdown++ 

    [markdown++]


##discussion

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket
Markdown prime (Markdown'), and Markdown plus plus (Markdown++)
##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)

##how to use
1. git clone 

##architecture
Markdown -> html

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor


##Future work
Markdown++ 

    [markdown++]


##discussion

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll
unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開
##Architecture

##屬性相關動作

    !publish

1. update article look-up table
2. update index page
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket
Markdown prime (Markdown')
##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)

##how to use
1. git clone 

##architecture
Markdown -> html

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]


##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主
##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahaha');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開
##Architecture

##屬性相關動作

    !publish

1. update article look-up table
2. update index page
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahaha');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahaha');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
filename:arrow_function.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/arrow_function.markdown
data#Arrow function
!tag javascript
!publish

[reference](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)

##feature
擁有更短的語法以及詞彙上綁定 this 變數，所有的箭頭函數都是無名函數 (anonymous function).

##ES6

##Usasge explaination with example
在Javascript 語法上如果要定義一個function，傳統的方法是


    var adder = function(a,b){ 

        return a+b; 

    }



然後用adder(3,2)就可以得到5。
如果用Arror function的描述方式就可以得到一個較精簡的寫法：


    var adder = (a,b)=>a+b;


只用了一行就完成了。
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:OODL.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/OODL.markdown
data#Object-Oriented Description Language (OODL)

OODL is a computer language to describe object and relation between objects using plain text formatting syntax.

##syntax 語法
###eamples
[Square]

-length: double

+display()

[TrafficSignalStateGreen]->[TrafficSignalStateAbstract]

+

[TrafficSignalStateYellow]->[TrafficSignalStateAbstract]


###object name
###public/protected/private
###properties
###member function

##Pattern Description
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:porting_application.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/porting_application.markdown
data#移殖應用程式到新的開發環境步驟

!tag visual studio, forfun
!publish   

#test
比如說從Qt 5.4 到 5.7 , Visual Studio 2013 到 2015 或者是新增一個類似的應用

1. 在新環境中開啟一個最簡單，可以執行的程式
2. GUI Template 複製
3. 虛擬Server的建置
4. GUI rendering
5. assets 
6. Controller porting
7. 按鈕行為

##備分一台相同開發環境的主機
代價就是時間
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahaha');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahahaaa');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A Blog backend platform with markdown WYSIWYG interface based on web socket

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.

##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

目前的版本
    
    [markdown prime]

內含
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

[markdown prime]會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown2html converter，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
因為markdown engine是一個黑盒子，只能掌握行為，可能會有很多狀況藏在裡面，遇到了才知道。

###新版的流程圖
- 加入
1. string -> pre-processor -> string linked list
2. string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));

##Future work
Markdown++ 

    [markdown++]

@html
<script>
console.log('hahahaaa');
</script>
@htmll

##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。

##demo

##todo
1. picture and video embeded issues.
2. auto-save 
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開
##Architecture

##屬性相關動作

    !publish

1. update article look-up table
2. update index page
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A modified markdown WYSIWYG interface 

##[demo](http://yushengc.twbbs.org:9090/markdown/markdown_demo.html)


##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

最初的實作內含了
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

使用者輸入字串會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown engine，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
程式邏輯過於複雜，可以把新加的功能統一在preprocessor中處理

###新版的流程圖

1. string -> pre-processor -> string Object array
2. 再依序處理string object

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));




##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。

    @html
    <script>
    while(1){console.log('hahahaaa');}
    </script>
    @htmll

因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。這部份的處理放在preprocessor中處理

unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

##角色介紹
###Tach 
原名是Tachikoma，他有內建一個可以方便量重量的手，還有一雙可以量長度的好眼力。


[Top 10 Algorithm in data mining](http://www.cs.umd.edu/~samir/498/10Algorithms-08.pdf)

Story
採竹筍
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103536.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103536.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103552.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103552.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103601.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103601.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103613.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170420_103613.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
##網路上的資源
在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

##第一版及第二版
我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。

第二版就花了比較多的時候，因為第一板用紙箱有一些問題

1. 不夠堅固
2. 因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出

所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170408_200521.small.jpg)

然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212045.small.jpg)




![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)


##成本
在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28

##心得
-  最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切
- 或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快
- 最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快
- 最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_095216.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_095216.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_095238.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_095238.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_100421.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170311_100421.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:planer01.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/planer01.markdown
data#拉槽刨刀
材質：胡桃木
用途：拉槽用。作木盒子或桌板的時候，常會有鑲板這個工法，而這個工法需要在邊板上面拉槽，再把面板作榫以鑲接。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103536.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103552.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103601.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103613.small.jpg)
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html

/home/ubuntu/nodejs/jarvis/express_jarvis.js:164
		          response.writeHead(200, {"Content-Type": "text/html"});
		          ^
ReferenceError: response is not defined
    at /home/ubuntu/nodejs/jarvis/express_jarvis.js:164:13
    at fs.js:268:14
    at Object.oncomplete (fs.js:107:15)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:planer01.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/planer01.markdown
data#拉槽刨刀
##材質
胡桃木

##用途
拉槽用。作木盒子或桌板的時候，常會有鑲板這個工法，而這個工法需要在邊板上面拉槽，再把面板作榫以鑲接。

##說明
旋鈕可以控制拉槽與邊上的距離

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103536.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103552.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103601.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103613.small.jpg)

##製作過程的記錄
花最多心思的是用鐅刀做出適合刀具的槽，讓刀具鑲進木材中緊密不滑動。

刀具部份成本，跟另一把刨刀兩組NT$3000，但重要的是沒有工廠大量製作的版本以降低成本。也越來越少工匠會量身打造這類的刀具。這組是沈師傅找到老師傅打造的。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095216.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095238.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_100421.small.jpg)
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
##網路上的資源
在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

##第一版及第二版
我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。

第二版就花了比較多的時候，因為第一板用紙箱有一些問題

1. 不夠堅固
2. 因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出

所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170408_200521.small.jpg)

然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212045.small.jpg)




![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)


##成本
在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28

##心得
-  最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切
- 或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快
- 最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快
- 最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:recipe
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/recipe/
ls:/home/ubuntu/nodejs/jarvis/blog/recipe/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/recipe/
filename:胡蘿蔔汁.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/recipe/
path:blog/recipe/胡蘿蔔汁.markdown
data#胡蘿蔔汁
春天的時候在阿婆家採收了兩大袋的胡蘿蔔，
filename:beef_noodle.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/recipe/
path:blog/recipe/beef_noodle.markdown
data#牛肉麵
@u2b https://www.youtube.com/embed/cyeuDeM4UUg @u2bee 

##備料 

1. 蔥(2-3)、薑(5)、蒜(5)、辣椒(2)、蕃茄(3)、白蘿蔔(3)、洋蔥(2)、紅蘿蔔(三分之二)、香菜
2. 牛肉(牛肋條)川燙去腥味，再浸常溫水，讓肉變Q
3. 調味料：醬油、冰糖、辣豆拌醬、蕃茄醬
4. 香料：白胡椒、迷迭香
##步驟

1. 豬油加蔥薑蒜拌炒，加入豆拌醬3匙、醬油1杯、紅酒或米酒少許、蕃茄醬少許，冰糖三分之二匙，放入牛肉拌煮
2. 放入壓力鍋，水蓋過肉(如使用一般鍋煮，水要再多一些)，加入白胡椒、迷迭香
3. 壓力鍋蓋鍋，加熱直到水氣出氣發出"逼"的聲音，關小火等候20分鐘，爾後再關火等候10分鐘
4. 開鍋試味道，若太淡，加入海鹽(不以加醬油來增醎)
5. 加入紅蘿蔔、白蘿蔔、蕃茄
6. 蓋壓力鍋後煮10分鐘，並等候排氣
7. 另起一鍋煮白麵條，加少許的鹽
8. 麵條跟牛肉湯汁合併即完成，若牛肉湯太醎可以加熱水
9. 若沒有壓力鍋，當牛肉煮滾後轉小火40分鐘，蘿蔔放入後煮20分鐘


unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
dir_to_create:blog/TeachingPlan
photo_dir_to_create:blog/resources/photos/TeachingPlan/
blog/TeachingPlan has been created.
blog/resources/photos/TeachingPlan/ has been created.
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
relative_path:TeachingPlan/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行01.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行01.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
relative_path:TeachingPlan/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行02.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行02.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
relative_path:TeachingPlan/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行03.PNG
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/小水滴的旅行03.small.PNG
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
##網路上的資源
在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

##第一版及第二版
我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。

第二版就花了比較多的時候，因為第一板用紙箱有一些問題

1. 不夠堅固
2. 因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出

所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170408_200521.small.jpg)

然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212045.small.jpg)




![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)


##成本
在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28

##心得
-  最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切
- 或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快
- 最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快
- 最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
filename:小水滴的旅行.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
path:blog/TeachingPlan/小水滴的旅行.markdown
data

unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
filename:小水滴的旅行.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
path:blog/TeachingPlan/小水滴的旅行.markdown
data
![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行01.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行02.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行03.PNG)
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
filename:小水滴的旅行.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
path:blog/TeachingPlan/小水滴的旅行.markdown
data
![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行01.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行02.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行03.PNG)
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FSM_transition_matrix_autogenerate_diagram_code.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FSM_transition_matrix_autogenerate_diagram_code.markdown
data#Auto Generate FSM object with Transition Matrix Input
!tag FSM
!publish

##Overview
這個專案是一個自動產生程式語言實作、描述的平台。狀態機(FSM)對程式設計師而言是非常常用的一種設計模式，筆者在撰寫軟體、韌體時，已經非常習慣使用狀態機來控制程式的流程，因為這種設計模式讓程式非常的容易除錯，程式的邏輯因為狀態機控制變得比較單純。但是對筆者而言，要在不同的語言下去實作狀態機，記憶不同程式語言的語法就是一件大量重覆的工作，因為工作需要常常在不同的語言下切換(Javascript, Verilog, C++等)，常常要回去翻過去專案的原始碼，才會記起相關的實作細節。因此使用自動化產生程式碼的目的，就是要減少程式設計師的工作量，系統化一些重覆的工作，藉此減低撰寫程式上的負擔。這篇文章介紹如何建構一個自動產生FSM物件的工具，有了這個工具，程式設計師可以專心在程式的架構上，而實作細節不再需要粍掉程式設計師大量的時間以及心力。我希望能將這部份的工作標準化，同樣且重要的工作認真的作一次，往後就可以安心的在框架下作業，如此增加工作完成的效率以及準確度，是這個專案的核心目的。

##output language
因為筆者工作主要的語言是C++, Verilog次之，所以會先產生C++的版本，再來是Verilog

##transition matrix described by FSM Markup Language
作為使用者輸入的方式，我選用了Transition Matrix，讓使用者描述狀態機，而格式則是採用Markdown。用Markdown的優點是有利於筆者文件化，以及文件的可讀性。用Markdown可以讓使用者(人類)容易理解，也可以透過相關的library解析後為電腦所處理。

以紅緣燈為例 
| STATE/event()        | 30seconds()         |5seconds()|  60seconds()  |
|: -------------------: |:------------------- :| :------------:|  :---------------:|
| GREEN                  | YELLOW             | X               |    X
| YELLOW                | X                         |  RED         |    X
|RED                        | X                         |   X             |     GREEN
  

##轉換流程
介紹轉換流程的同時，也是介紹技術上的細節。筆者希望程式設計師能夠將時間節省在設計這一個步驟。所以在這個平台使用者的輸入介面就是狀態轉換的列表，除此之外沒有了！而平台的輸出呢就是自動化產生的C++ object class。

我們已經知道最終我們要的輸出是什麼，以及使用者輸入，剩下的就是我們應該自動化的部份了。條列一下逐步需要做的事情。

1. 使用者輸入Transition Matrix，用Markdown的格式
2. Markdown 格式的表格經由特定的[函式庫]轉換成HTML(參考[showdown](https://github.com/showdownjs/showdown))
3. 自定一個函式庫，將HTML格式的table 解析出有多少state, event等資訊
4. 有了state, event這些資料就足以產一一個FSM的框架了。

##C++ class architecture
###state abstract class
1. 命名：[project name]StateAbstract.[cpp|h]
2. 定義各個event()的行為，預設在各state不作工作

###state class
1. 命名：[project name]State[state name].[cpp|h]
example: f
2. 繼承自state abstract class，有幾個state就有幾個class
3. 若event()在該state有觸發行為，則該event()在該state要實作。 

###controller abstract class
###controller class
####"event" member function 


##references
1. [State Transition Table Wiki](https://en.wikipedia.org/wiki/State_transition_table)
2. [GoJS](http://gojs.net/latest/index.html)
3. [Markdown to HTML javascript library](https://github.com/showdownjs/showdown)

album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:GoogleBlocks.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/GoogleBlocks.markdown
data#Google Blocks

##Relative Projects
Algoblock, 最早在1993年就出現的概念，讓小朋友透過堆積木的方式就可以控制電腦裡面的角色動作。

filename:WYSIWYG_blog_platform.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/WYSIWYG_blog_platform.markdown
data#Build your  WYSIWYG blog platform based on node.js, express.js, and socket.io
##feature
1. using Console to operate file system operation
2. host your own image server
3. 跟文件相關的屬性，也在文件當中，比如tag, 是否公開

##feature
1. based on websocket.
2. user can use command line to do file system operation
3. hosted on server-side (ex. Amazon EC2)
4. using existed markdown engine.
##Architecture

##屬性相關動作

    !publish

1. update article look-up table
2. update index page
cd cmd dir to move:MachineLearning
paths in stack:/home/ubuntu/nodejs/jarvis/blog/,/home/ubuntu/nodejs/jarvis/blog/computer_science/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/MachineLearning/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/
{ [Error: ENOENT, no such file or directory '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/']
  errno: 34,
  code: 'ENOENT',
  path: '/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/MachineLearning/',
  syscall: 'readdir' }
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
filename:todo.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/
path:blog/todo.markdown
data#TODO

3. copy and paste image on jarvis
[reference](https://codepen.io/netsi1964/pen/IoJbg)
4. 加入latex, equation (mathjax)
[reference](https://blog.gtwang.org/web-development/mathjax-latex-mathml/)
5. reseme
11. [Vue.js 使用svg製作互動動畫](https://www.facebook.com/bosscodingplease/?hc_ref=NEWSFEED)
12. vue angular react d3 bootstrap
vue: simpler than angular
13. bootstrap
15. [網頁切版](https://goo.gl/wFSDrL)

## front-end 
6. [d3](../d3)
10. [CSS3 Patterns Gallery](http://lea.verou.me/css3patterns/)

##algorithm
2. machine learning, algorithm
9. [leetcode](https://leetcode.com/)
14. [AI for robotics](https://classroom.udacity.com/courses/cs373-old/lessons/48752102/concepts/484393860923#)
17. parser, OODL (3 days)
22. [introduction to EDA](../blog/computer_science/introduction_EDA.html)

##projects
8. 3D printer driver
16. drag and match game (3days)
18. 書架 (3 days)
19. 古今相照 加入
20. multi-purpose and convertible furniture
21. [ESP8266+arduino](http://lets-make-games.blogspot.tw/2015/06/wifi.html)
22. markdown++
23. facebooc trace
24. pattern template

##blog

album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
test
test
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FreeBlog.markdown
data# <Free>Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。

##User Story
當發佈一篇文章的時候，也發佈了一個App

<free>



</free>
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html

command from user:markdown
compiler: lexical analyzing
There are 0 NUM:
There are 1 VAR:
[ 'm', 'a', 'r', 'k', 'd', 'o', 'w', 'n' ]
Tokens:
VAR
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 

##User Story
當發佈一篇文章的時候，也發佈了一個App

    @lunr
        @@database: scripts
        1. Lunr, Like Solr, but much smaller, and not as bright.
        2. React, A JavaScript library for building user interfaces. 
        3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
        @@end
        @@search
        "bright" in scripts
        @@end
    @end

在後端就會被轉換成這樣

    documents = [{
      "name": "Lunr",
      "text": "Like Solr, but much smaller, and not as bright."
    }, {
      "name": "React",
      "text": "A JavaScript library for building user interfaces."
    }, {
      "name": "Lodash",
      "text": "A modern JavaScript utility library delivering modularity, performance & 
    extras."
    }]

    var idx = lunr(function () {
      this.ref('name')
      this.field('text')

      documents.forEach(function (doc) {
        this.add(doc)
      }, this)
    })

    idx.search("bright")

這個的應用是什麼呢？想像當你想要寫一個blog來介紹某個演算法時，我們就可以用以下的方式來寫這個blog

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    @lunr
    @@database: scripts
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
    @end

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
    @@search: 1
    "library" in scripts
    @@end

    @textarea:testinput
    
    @@search: 1
    @textarea:testinput, scripts
    @@end

然後產生的結果就會如下

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
     React
    
    [textarea]
    [search results]



album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[說明的滿清楚的Youtube影片](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 

##User Story
當發佈一篇文章的時候，也發佈了一個App

    @lunr
        @@database: scripts
        1. Lunr, Like Solr, but much smaller, and not as bright.
        2. React, A JavaScript library for building user interfaces. 
        3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
        @@end
        @@search
        "bright" in scripts
        @@end
    @end

在後端就會被轉換成這樣

    documents = [{
      "name": "Lunr",
      "text": "Like Solr, but much smaller, and not as bright."
    }, {
      "name": "React",
      "text": "A JavaScript library for building user interfaces."
    }, {
      "name": "Lodash",
      "text": "A modern JavaScript utility library delivering modularity, performance & 
    extras."
    }]

    var idx = lunr(function () {
      this.ref('name')
      this.field('text')

      documents.forEach(function (doc) {
        this.add(doc)
      }, this)
    })

    idx.search("bright")

這個的應用是什麼呢？想像當你想要寫一個blog來介紹某個演算法時，我們就可以用以下的方式來寫這個blog

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    @lunr
    @@database: scripts
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
    @end

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
    @@search: 1
    "library" in scripts
    @@end

    @textarea:testinput
    
    @@search: 1
    @textarea:testinput, scripts
    @@end

然後產生的結果就會如下

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
     React
    
    [textarea]
    [search results]



album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 

##User Story
當發佈一篇文章的時候，也發佈了一個App

    @lunr
        @@database: scripts
        1. Lunr, Like Solr, but much smaller, and not as bright.
        2. React, A JavaScript library for building user interfaces. 
        3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
        @@end
        @@search
        "bright" in scripts
        @@end
    @end

在後端就會被轉換成這樣

    documents = [{
      "name": "Lunr",
      "text": "Like Solr, but much smaller, and not as bright."
    }, {
      "name": "React",
      "text": "A JavaScript library for building user interfaces."
    }, {
      "name": "Lodash",
      "text": "A modern JavaScript utility library delivering modularity, performance & 
    extras."
    }]

    var idx = lunr(function () {
      this.ref('name')
      this.field('text')

      documents.forEach(function (doc) {
        this.add(doc)
      }, this)
    })

    idx.search("bright")

這個的應用是什麼呢？想像當你想要寫一個blog來介紹某個演算法時，我們就可以用以下的方式來寫這個blog

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    @lunr
    @@database: scripts
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.
    @end

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
    @@search: 1
    "library" in scripts
    @@end

    @textarea:testinput
    
    @@search: 1
    @textarea:testinput, scripts
    @@end

然後產生的結果就會如下

    今天要介紹的這個演算法，叫作lunr，他的主要功能是搜尋文章中的關鍵字，以下是使用範例，我們首先建立資料庫
    1. Lunr, Like Solr, but much smaller, and not as bright.
    2. React, A JavaScript library for building user interfaces. 
    3. Lodash, A modern JavaScript utility library delivering modularity, performance & extras.

    我們在資料庫中使用lunr這個函式庫搜尋"library"，就會得到以下結果：
     React
    
    [textarea]
    [search results]



unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 

##User Story
當發佈一篇文章的時候，也發佈了一個App



unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:markdown_blog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/markdown_blog.markdown
data#A modified markdown WYSIWYG interface 

##[demo](http://yushengc.twbbs.org:9090/markdown/markdown_demo.html)


##Introduction
筆者想要實現一個系統，我想要更有彈性的產生HTML。傳統的Markdown使用上是字串與HTML之間的轉換，字串與HTML之間有著固定的轉換關係，而且已經發展的相當成熟。但筆者想要實現一個功能，是字串中不只包含文章的內容，而是有包含了該篇文章的屬性，比如說是否要設為公開，是否有包含tags。此外，筆者也想要自含一些自己定義的markdown語法，比如說我想要把@u2b 與@u2bee之間的連結轉換成iframe 的型式嵌入youtube影片，或是說我想要自己調整文字或圖片的大小，這時候就需要一個彈性更高的系統了。

Markdown

    [markdown]

轉換成HTML

    [HTML]

最初的實作內含了
- 非markdown語法但系統可以辨識的語法，如內嵌youtube iframe
- 系統指令，比如說想要內嵌HTML code，以"@"，或"!"開頭

範例

     @html 
     <svg>
     </svg>
     @htmll

使用者輸入字串會經過一個前處理器，把系統指令抽取出來，再將剩下的字串餵給markdown engine，最後再將目前的html 其中沒有被辨識出來的字串置換成指定的html，最後再疊加上外加的html

###流程圖
1. string ->pre-processor->string' + system_command (publish, tag, html cascade) 
2. string' -> markdown engine -> html
3. html -> post-processor -> html' (ex: u2b)
4. 存檔的時候server再根據system_command 處理

###可以改進的地方
程式邏輯過於複雜，可以把新加的功能統一在preprocessor中處理

###新版的流程圖

1. string -> pre-processor -> string Object array
2. 再依序處理string object

@html
<svg width="640" height="480" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">
 <!-- Created with SVG-edit - http://svg-edit.googlecode.com/ -->
 <g>
  <title>Layer 1</title>
  <line stroke="#000000" id="svg_1" y2="291.33333" x2="235.66667" y1="291.33333" x1="158.66667" stroke-width="5" fill="none"/>
  <line id="svg_3" y2="291.33333" x2="234.66667" y1="277.33333" x1="223.66667" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line transform="rotate(-98.90171813964844 229.66665649414065,297.33334350585943) " id="svg_4" y2="304.33333" x2="235.16667" y1="290.33333" x1="224.16667" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" id="svg_5" y="317.33333" x="129.33334" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">whole string</text>
  <rect id="svg_9" height="101.33333" width="177.33333" y="242.66667" x="238.66667" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="#ffffff"/>
  <text xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" id="svg_10" y="296" x="328.00001" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">preprocessor</text>
  <line id="svg_11" stroke="#000000" y2="291.4082" x2="494.4677" y1="291.4082" x1="417.46769" stroke-width="5" fill="none"/>
  <line id="svg_12" y2="291.4082" x2="493.46769" y1="277.4082" x1="482.46769" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_13" transform="rotate(-98.90171813964844 488.46771240234375,297.40820312499994) " y2="304.4082" x2="493.96769" y1="290.4082" x1="482.96769" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_14" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="321.34375" x="522.68751" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">StringObject Array</text>
  <line id="svg_16" stroke="#000000" y2="100.66666" x2="126.09896" y1="100.66666" x1="49.09896" stroke-width="5" fill="none"/>
  <line id="svg_17" y2="100.66666" x2="125.09896" y1="86.66666" x1="114.09896" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_18" transform="rotate(-98.90171813964844 120.09895324707031,106.66664886474608) " y2="113.66666" x2="125.59896" y1="99.66666" x1="114.59896" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_19" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="129.33333" x="82.43229" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">string</text>
  <rect id="svg_20" height="101.33333" width="177.33333" y="52" x="129.09896" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="#ffffff"/>
  <text id="svg_21" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="105.33333" x="218.4323" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">preprocessor</text>
  <line id="svg_22" stroke="#000000" y2="96.40819" x2="384.56665" y1="96.40819" x1="307.56665" stroke-width="5" fill="none"/>
  <line id="svg_23" y2="96.40819" x2="383.56665" y1="82.40819" x1="372.56665" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_24" transform="rotate(-98.90171813964844 378.566650390625,102.40817260742188) " y2="109.40819" x2="384.06665" y1="95.40819" x1="373.06665" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_25" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="78.34375" x="343.45314" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">string</text>
  <polygon strokeWidth="5" strokecolor="#000000" fill="#000000" edge="0" orient="x" sides="5" shape="regularPoly" id="svg_28" cy="181.33333" cx="-365.33333"/>
  <text style="cursor: move;" id="svg_33" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="369.34375" x="123.35419" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">StringObject Array</text>
  <text id="svg_34" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="398.66668" x="128.67971" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">string</text>
  <line id="svg_36" stroke="#000000" y2="392.74153" x2="237.13434" y1="392.74153" x1="160.13434" stroke-width="5" fill="none"/>
  <line id="svg_37" y2="392.74153" x2="236.13434" y1="378.74153" x1="225.13434" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_38" transform="rotate(-98.90171813964844 231.1343536376953,398.7415466308594) " y2="405.74153" x2="236.63434" y1="391.74153" x1="225.63434" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <rect id="svg_39" height="101.33333" width="177.33333" y="354.66665" x="239.33333" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="#ffffff"/>
  <text stroke="#000000" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" id="svg_40" y="408" x="329.33333" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" fill="#000000">markdown engine</text>
  <line id="svg_41" stroke="#000000" y2="395.40821" x2="491.80101" y1="395.40821" x1="414.80101" stroke-width="5" fill="none"/>
  <line id="svg_42" y2="395.40821" x2="490.80101" y1="381.40821" x1="479.80101" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_43" transform="rotate(-98.90171813964844 485.80102539062494,401.4082336425781) " y2="408.40821" x2="491.30101" y1="394.40821" x1="480.30101" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_44" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="401.33856" x="532.01826" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">HTML</text>
  <line id="svg_46" transform="rotate(-98.90171813964844 378.566650390625,102.40817260742188) " y2="109.40819" x2="384.06665" y1="95.40819" x1="373.06665" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_47" y2="96.40819" x2="383.56665" y1="82.40819" x1="372.56665" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line stroke="#000000" transform="rotate(89.46014404296875 254.43980407714838,173.26220703125003) " id="svg_48" y2="173.2622" x2="272.29291" y1="173.2622" x1="236.58672" stroke-width="5" fill="none"/>
  <line id="svg_52" transform="rotate(-11.205945014953613 249.21768188476526,182.57487487792983) " y2="189.57488" x2="254.71768" y1="175.57488" x1="243.71768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line transform="rotate(85.30094909667969 262.2176818847656,182.32487487792972) " id="svg_53" y2="189.32488" x2="267.71768" y1="175.32488" x1="256.71768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_54" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="193.43228" x="362.76043" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">system command</text>
  <rect id="svg_55" height="101.33333" width="177.33333" y="49.33334" x="388.43284" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="#ffffff"/>
  <text id="svg_56" stroke="#000000" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="102.66669" x="478.43284" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" fill="#000000">markdown engine</text>
  <line stroke="#000000" id="svg_57" y2="96.0749" x2="610.90051" y1="96.0749" x1="563.90051" stroke-width="5" fill="none"/>
  <line id="svg_59" y2="96.74155" x2="613.46768" y1="82.74155" x1="602.46768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_60" transform="rotate(-98.90171813964844 608.4676513671876,102.74151611328128) " y2="109.74155" x2="613.96768" y1="95.74155" x1="602.96768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_61" transform="rotate(-98.90171813964844 608.4676513671876,102.74151611328128) " y2="109.74155" x2="613.96768" y1="95.74155" x1="602.96768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <line id="svg_62" y2="96.74155" x2="613.46768" y1="82.74155" x1="602.46768" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="5" stroke="#000000" fill="none"/>
  <text id="svg_63" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="130.01044" x="604.51045" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">HTML</text>
  <text xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" id="svg_64" y="30" x="65" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">舊版流程</text>
  <text style="cursor: move;" id="svg_65" xml:space="preserve" text-anchor="middle" font-family="serif" font-size="24" y="253" x="75" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" stroke="#000000" fill="#000000">修改後的流程</text>
 </g>
</svg>
@htmll

String Constructor

    var StringNode = function(data, property){
        this.data = data;
        this.property = property;
    }

Object

    var StringObjectSet = [];
    StringObjectSet.push(StringNode("string", "system_cmd"));
    StringObjectSet.push(StringNode("string", "markdown_input"));
    StringObjectSet.push(StringNode("string", "html"));
    StringObjectSet.push(StringNode("string", "markdown_input", null));




##discussion
###system_cmd 
1. 若system_cmd 重覆，只以第一個為主

###系統的安全性
要內嵌一個html script，就會有風險，換句話說當有人輸入一個<script>包起來的無窮迴圈，則產生的網頁就是一個大麻煩了。

    @html
    <script>
    while(1){console.log('hahahaaa');}
    </script>
    @htmll

因此需要一個guard來過濾javascript才行，或是更進一步，過濾javascript其中的迴圈。這部份的處理放在preprocessor中處理

cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:..
a
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
filename:小水滴的旅行.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
path:blog/TeachingPlan/小水滴的旅行.markdown
data
![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行01.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行02.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/小水滴的旅行03.PNG)
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:villageAI
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 


##User Story
1. 當發佈一篇文章的時候，也發佈了一個App
2. 使用者可以用來產生svg, html, javascript function processed output
3. 使用者可以自行定義pattern

使用者自行定義的語法以$開頭，系統內建的語法以@開頭

example:

    $svg_test
        circle circle01;
        circle circle02;
    $end

$svg_test
    circle circle01;
    circle circle02;
$end

@html
<canvas id="myCanvas" width="1200px" height="1200px"></canvas>
@htmll

unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 


##User Story
1. 當發佈一篇文章的時候，也發佈了一個App
2. 使用者可以用來產生svg, html, javascript function processed output
3. 使用者可以自行定義pattern

使用者自行定義的語法以$開頭，系統內建的語法以@開頭

example:

    $svg_test
        circle circle01;
        circle circle02;
    $end

$svg_test
    circle circle01;
    circle circle02;
$end

@html
<canvas id="myCanvas" width="1200px" height="1200px"></canvas>
@htmll 


filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


filename:540_Single_Element_in_a_Sorted_Array.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/540_Single_Element_in_a_Sorted_Array.markdown
data#540. Single Element in a Sorted Array
##description
Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.

###Example 1:
Input: [1,1,2,3,3,4,4,8,8]

Output: 2
###Example 2:
Input: [3,3,7,7,10,11,11]

Output: 10

##Solution
    int Solution::singleNonDuplicate(vector<int>& nums) {	
	    stack <int>tmp;
	    for (int i = 0; i < nums.size(); i++){
		    if (tmp.empty()) tmp.push(nums[i]);
		    else{
			    if (tmp.top() == nums[i]){
				    tmp.pop();
			    }else{
				    tmp.push(nums[i]);
    			}
    		}
    	}
    	int result = tmp.top();
    	return result;
    }


filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 


##User Story
1. 當發佈一篇文章的時候，也發佈了一個App
2. 使用者可以用來產生svg, html, javascript function processed output
3. 使用者可以自行定義pattern

使用者自行定義的語法以$開頭，系統內建的語法以@開頭

example:

    $svg_test
        circle circle01;
        circle circle02;
    $end

$svg_test
    circle circle01;
    circle circle02;
$end

@html
<canvas id="myCanvas" width="1200px" height="1200px"></canvas>
@htmll 


filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


filename:introduction.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/introduction.markdown
data#VillageAI 
AI莊園是阿蘇一家努力實現的夢想。在這個莊園裡面，有著自己的生態系，就算不從外面買東西，也能過著自給自足的生活。這個農莊裡有田，有菜園，有農具自動化的工具，有雞、有果樹，有小小的池塘裡面有魚，也有可以烤麵包的窯，還有一個室外的爐灶，還有一個溫室種著各式各樣的花，以及在透明建築底下的一間乾燥花工作室，緊臨在工作室旁邊則是一間木作的工作室。阿蘇希望在這個農莊裡面，處處都隱藏著人類的智慧結晶-演算法來幫助他實現

##角色介紹
###Tach 
原名是Tachikoma，他有內建一個可以方便量重量的手，還有一雙可以量長度的好眼力。


[Top 10 Algorithm in data mining](http://www.cs.umd.edu/~samir/498/10Algorithms-08.pdf)

Story
採竹筍
用B+ tree來分類木材
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:KNN.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/KNN.markdown
data#KNN
##K-Nearest-Neighbor

菜園裡的紅蘿蔔採收了，阿婆帶著孩子們採收後，用溪水配合刷子清洗了一遍遍，把紅蘿蔔上的土給洗了乾淨，之後散放在廣場上讓午後的陽光曬過，因為唯有把水份給熱乾，這樣孩子們帶著一袋袋的紅蘿蔔回家時，不容易爛掉。

阿婆一邊挑著紅蘿蔔，一邊教Tachi說:又小又醜的我們把他拿來作紅蘿蔔汁，又大又漂亮的分給孩子們，其他的放廚房我們慢慢的吃。Tachi就馬上想到了以後他可以來幫阿婆做分類的工作。

@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll

首先把紅蘿蔔的長寬比例量出來，長寬比越懸殊的外型越不討好，相反的胖胖的紅蘿蔔長寬比就比較接近，然後再把每個紅蘿蔔的重量給量好。再來找來一張圖，圖上畫上x軸以及y軸，然後把長寬比以及重量依照百分比排序好，然後每個蘿蔔都依照各別的屬性給擺放在圖上。

Tachi 心想要把阿婆現在分類的準則好好記下來，做為以後分類的參考，以後只要有新採收的紅蘿蔔，就來比對一下之前做好的圖來決定這個紅蘿蔔的去處是什麼。
 
@html
	<svg width="500" height="100"><circle cx="5" r="8.94427190999916" style="cy: 20;"></circle><circle cx="480" r="3.1622776601683795" style="cy: 90;"></circle><circle cx="250" r="7.0710678118654755" style="cy: 50;"></circle><circle cx="100" r="8.18535277187245" style="cy: 33;"></circle><circle cx="330" r="2.23606797749979" style="cy: 95;"></circle><circle cx="410" r="9.38083151964686" style="cy: 12;"></circle><circle cx="475" r="7.483314773547883" style="cy: 44;"></circle><circle cx="25" r="5.744562646538029" style="cy: 67;"></circle><circle cx="85" r="8.888194417315589" style="cy: 21;"></circle><circle cx="220" r="3.4641016151377544" style="cy: 88;"></circle><g><g class="axis axis--x" fill="none" font-size="10" font-family="sans-serif" text-anchor="middle"><path class="domain" stroke="#000" d="M0.5,-6V0.5H420.5V-6"></path><g class="tick" opacity="1" transform="translate(0,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#8e0152</text></g><g class="tick" opacity="1" transform="translate(42,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#c51b7d</text></g><g class="tick" opacity="1" transform="translate(84,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#de77ae</text></g><g class="tick" opacity="1" transform="translate(126,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f1b6da</text></g><g class="tick" opacity="1" transform="translate(168,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#fde0ef</text></g><g class="tick" opacity="1" transform="translate(210,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#f7f7f7</text></g><g class="tick" opacity="1" transform="translate(252,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#e6f5d0</text></g><g class="tick" opacity="1" transform="translate(294,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#b8e186</text></g><g class="tick" opacity="1" transform="translate(336,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#7fbc41</text></g><g class="tick" opacity="1" transform="translate(378,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#4d9221</text></g><g class="tick" opacity="1" transform="translate(420,0)"><line stroke="#000" y2="-6" x1="0.5" x2="0.5"></line><text fill="#000" y="-24" x="0.5" dy="0em">#276419</text></g></g></g></svg>
@htmll


unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
filename:FreeBlog.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/villageAI/
path:blog/villageAI/FreeBlog.markdown
data#@free Blog

Free是自由的意思，

將內容不限於Blog內，而是能跳脫於Blog以外的世界。Blog是一種媒介，而不僅是儲存的媒體。我希望這個平台可以加速演算法的應用廣度，

What if you have data, and algorithm, but have no ideas how to present, or just have to time to dig in the presentation way? You will need a platform to immediately upload data and algorithm, and showing the results. 


##User Story
1. 當發佈一篇文章的時候，也發佈了一個App
2. 使用者可以用來產生svg, html, javascript function processed output
3. 使用者可以自行定義pattern

使用者自行定義的語法以$開頭，系統內建的語法以@開頭

example:

    $svg_test
        circle circle01;
        circle circle02;
    $end

$svg_test
    circle circle01;
    circle circle02;
$end

@html
<canvas id="myCanvas" width="1200px" height="1200px"></canvas>
@htmll 


unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/villageAI/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/villageAI/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
dir_to_create:blog/HandMake
photo_dir_to_create:blog/resources/photos/HandMake/
blog/HandMake has been created.
blog/resources/photos/HandMake/ has been created.
cd cmd dir to move:HandMake
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/HandMake/
relative_path:HandMake/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/20170426_212950.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/20170426_212950.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/
ls:/home/ubuntu/nodejs/jarvis/blog/HandMake/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/
relative_path:HandMake/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/.small.undefined
end upload

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: EISDIR, open '/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/'
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:HandMake
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/HandMake/
ls:/home/ubuntu/nodejs/jarvis/blog/HandMake/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/
relative_path:HandMake/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/20170426_195305.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/20170426_195305.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/HandMake/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161823.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161823.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161829.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161829.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
assets:undefined
blog/resources/p
assets:undefined
blog/resources/pho
blog/resources/phot
blog/resources/photo
blog/resources/photos
blog/resources/ph
blog/resources/photos
unpublish
undefined
gen_main_html
relative_path:woodwork/
file_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161823.jpg
file_small_path:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/20170427_161823.small.jpg
end upload
resized image generated
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:活動角尺.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/活動角尺.markdown
data#活動角尺
##材質
肖楠

![](../blog/resources/photos/woodwork/20170427_161829.small.jpg)

![](../blog/resources/photos/woodwork/20170427_161823.small.jpg)




	  
unpublish
undefined
gen_main_html
unpublish
undefined
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[說明的滿清楚的Youtube影片](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

unpublish
undefined
gen_main_html
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:computer_science
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[說明的滿清楚的Youtube影片](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

blog/markdown/showdown.min.js.map
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
filename:BPlusTree.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/computer_science/
path:blog/computer_science/BPlusTree.markdown
data#B+tree
![](../blog/resources/photos/computer_science/BPlusTreeStructure.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG)
![](../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG)
[說明的滿清楚的Youtube影片](https://www.youtube.com/watch?v=_nY8yR6iqx4&index=2&list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd)
##Hash

##關於演算法
1. 影像演算法
    *速度
    *成像效果
    *
2. 資料結構演算法
    * B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。
3. 

unpublish
undefined
<h1>B+tree</h1>

<p><img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure.PNG">
<img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG">
<img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG">
<img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG">
<a href="https://www.youtube.com/watch?v=_nY8yR6iqx4&amp;index=2&amp;list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd">說明的滿清楚的Youtube影片</a></p>

<h2>Hash</h2>

<h2>關於演算法</h2>

<ol><li>影像演算法
<em>速度
</em>成像效果
*</li><li>資料結構演算法<ul><li>B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。</li></ul></li><li></li></ol>
gen_main_html
unpublish
undefined
<h1>B+tree</h1>

<p><img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure.PNG"></p>

<p><img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert01.PNG"></p>

<p><img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert02.PNG"></p>

<p><img alt="" src="../../blog/resources/photos/computer_science/BPlusTreeStructure_insert03.PNG"></p>

<p><a href="https://www.youtube.com/watch?v=_nY8yR6iqx4&amp;index=2&amp;list=PLXAjOiPf89kP8wP-njE2o0y9qnrwt6xUd">說明的滿清楚的Youtube影片</a></p>

<h2>Hash</h2>

<h2>關於演算法</h2>

<ol><li>影像演算法
<em>速度
</em>成像效果
*</li><li>資料結構演算法<ul><li>B+ tree，在需要在大量的資料中快速取得資訊時(如資料庫、作業系統的檔案結構)，就需要B+ tree的架構快速的取得資料。</li></ul></li><li></li></ol>
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/computer_science/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/computer_science/
cd cmd dir to move:wood
pwd:/home/ubuntu/nodejs/jarvis/blog/computer_science/
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:wood
pwd:/home/ubuntu/nodejs/jarvis/blog/
ls:/home/ubuntu/nodejs/jarvis/blog/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/
cd cmd dir to move:woodwork
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/woodwork/
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:活動角尺.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/活動角尺.markdown
data#活動角尺
##材質
肖楠
##說明
當想要畫特定角度的時候很好用

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170427_161829.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170427_161823.small.jpg)




	  
unpublish
undefined
<h1>活動角尺</h1>

<h2>材質</h2>

<p>肖楠</p>

<h2>說明</h2>

<p>當想要畫特定角度的時候很好用</p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170427_161829.small.jpg"></p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170427_161823.small.jpg"></p>
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:planer01.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/planer01.markdown
data#拉槽刨刀
##材質
胡桃木

##用途
拉槽用。作木盒子或桌板的時候，常會有鑲板這個工法，而這個工法需要在邊板上面拉槽，再把面板作榫以鑲接。

##說明
旋鈕可以控制拉槽與邊上的距離

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103536.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103552.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103601.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170420_103613.small.jpg)

##製作過程的記錄
花最多心思的是用鐅刀做出適合刀具的槽，讓刀具鑲進木材中緊密不滑動。

刀具部份成本，跟另一把刨刀兩組NT$3000，但重要的是沒有工廠大量製作的版本以降低成本。也越來越少工匠會量身打造這類的刀具。這組是沈師傅找到老師傅打造的。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095216.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095238.small.jpg)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_100421.small.jpg)
unpublish
undefined
<h1>拉槽刨刀</h1>

<h2>材質</h2>

<p>胡桃木</p>

<h2>用途</h2>

<p>拉槽用。作木盒子或桌板的時候，常會有鑲板這個工法，而這個工法需要在邊板上面拉槽，再把面板作榫以鑲接。</p>

<h2>說明</h2>

<p>旋鈕可以控制拉槽與邊上的距離</p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170420_103536.small.jpg"></p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170420_103552.small.jpg"></p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170420_103601.small.jpg"></p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170420_103613.small.jpg"></p>

<h2>製作過程的記錄</h2>

<p>花最多心思的是用鐅刀做出適合刀具的槽，讓刀具鑲進木材中緊密不滑動。</p>

<p>刀具部份成本，跟另一把刨刀兩組NT$3000，但重要的是沒有工廠大量製作的版本以降低成本。也越來越少工匠會量身打造這類的刀具。這組是沈師傅找到老師傅打造的。</p>

<p><img alt="" src="http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095216.small.jpg"></p>

<p><img alt="" src="http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_095238.small.jpg"></p>

<p><img alt="" src="http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170311_100421.small.jpg"></p>
gen_main_html
ls:/home/ubuntu/nodejs/jarvis/blog/woodwork/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/woodwork/
filename:WoodCryptex.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/woodwork/
path:blog/woodwork/WoodCryptex.markdown
data#木製寶藏鎖 Wood Cryptex
##網路上的資源
在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170317_180841.small.jpg)

##第一版及第二版
我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。

第二版就花了比較多的時候，因為第一板用紙箱有一些問題

1. 不夠堅固
2. 因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出

所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170408_200521.small.jpg)

然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。

![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212045.small.jpg)




![](http://yushengc.twbbs.org:9090/blog/resources/photos/woodwork/20170414_212207.small.jpg)


##成本
在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28

##心得
-  最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切
- 或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快
- 最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快
- 最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了
unpublish
undefined
<h1>木製寶藏鎖 Wood Cryptex</h1>

<h2>網路上的資源</h2>

<p>在youtube 上面有很多製作這類的教學影片，有用紙片，有用雷射雕刻，也有用木頭來做的，多看幾個比較有概念。</p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170317_180841.small.jpg"></p>

<h2>第一版及第二版</h2>

<p>我的第一版是花了一個晚上的時候用瓦楞紙板以及品客的瓶子作成。</p>

<p>第二版就花了比較多的時候，因為第一板用紙箱有一些問題</p>

<ol><li>不夠堅固</li><li>因為同心圓是變型的，所以會發生雖然密碼不對但仍能拉出</li></ol>

<p>所以就用了木頭來做，木材是之前做家具剩下來的木頭，先花了一個下午把圓用電動線鋸鋸出來，然後膠合。半天完成如下圖</p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170408_200521.small.jpg"></p>

<p>然後再花一個下午把外框給完成，最後再花一個晚上鑽孔把螺絲給鎖上，然後貼上標記。</p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170414_212045.small.jpg"></p>

<p><img alt="" src="../../blog/resources/photos/woodwork/20170414_212207.small.jpg"></p>

<h2>成本</h2>

<p>在職人的店買的，一般水電行沒有找到這種零賣的
1. S型給水接頭(小) NT$ 28
2. 塞口給水接頭(小) NT$ 18
3. S型給水接頭(中) NT$ 38
4. 塞口給水接頭(中) NT$ 28</p>

<h2>心得</h2>

<ul><li>最理想的成品是全部都用自然物做，也就是中心的圓管能用竹子之類的自然物來製作，但前題是要找到兩個竹子其中可以完美的內切</li><li>或是能夠找到尺寸齊全的切圓鑽頭取下圓後再膠合，這個方法最漂亮且製作速度應該會最快</li><li>最外圍的圓可以置換成多邊型，如此在加工上會可能會不一樣，也許更快</li><li>最外圍若是圓型，在題目的數量上可能較有彈性，若是多邊形，就要配合題目的數量了</li></ul>
gen_main_html
cd cmd dir to move:..
a
pwd:/home/ubuntu/nodejs/jarvis/blog/
cd cmd dir to move:TeachingPlan
paths in stack:/home/ubuntu/nodejs/jarvis/blog/
pwd:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
ls:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
album_pwd:/home/ubuntu/nodejs/jarvis/blog/resources/photos/TeachingPlan/
filename:小水滴的旅行.markdown
current_path:/home/ubuntu/nodejs/jarvis/blog/TeachingPlan/
path:blog/TeachingPlan/小水滴的旅行.markdown
data
![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/water01.small.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/water02.small.PNG)

![](http://yushengc.twbbs.org:9090/blog/resources/photos/TeachingPlan/water03.small.PNG)
unpublish
undefined
<p><img alt="" src="../../blog/resources/photos/TeachingPlan/water01.small.PNG"></p>

<p><img alt="" src="../../blog/resources/photos/TeachingPlan/water02.small.PNG"></p>

<p><img alt="" src="../../blog/resources/photos/TeachingPlan/water03.small.PNG"></p>
gen_main_html
